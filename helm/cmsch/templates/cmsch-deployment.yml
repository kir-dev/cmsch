kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
    app.kubernetes.io/name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      app.kubernetes.io/name: {{ .Release.Name }}
  template:
    metadata:
      name: {{ .Release.Name }}
      labels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Release.Name }}
        kir-dev-spring-monitored: enabled
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "80"
        prometheus.io/scrape: "true"
    spec:
{{ if  .Values.imagePullSecretName  }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecretName }}
{{ end }}
      {{ if not .Values.s3.useS3 }}
      volumes:
        - name: {{ .Release.Name }}-pv
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pv
      {{ end }}
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.apiImage }}
          securityContext:
            runAsUser: 0
          ports:
            - name: web
              containerPort: 80
              protocol: TCP
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-secrets
            - configMapRef:
                name: {{ .Release.Name }}-config
          env:
            {{ if .Values.postgres.enabled }}
            - name: POSTGRES_IP
              value: "{{ .Release.Name }}-postgres:5432"
            {{ end }}
            - name: CMSCH_SPRING_PROFILES
              value: {{ .Values.springProfiles }}
            - name: PORT
              value: '80'
          resources:
            {{ if or (.Values.resources.limits.cpu) (.Values.resources.limits.memory) }}
            limits:
              {{ if .Values.resources.limits.cpu }}
              cpu: {{ .Values.resources.limits.cpu }}
              {{ end }}
              {{ if .Values.resources.limits.memory }}
              memory: {{ .Values.resources.limits.memory }}
              {{ end }}
            {{ end }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          {{ if not .Values.s3.useS3 }}
          volumeMounts:
            - name: {{ .Release.Name }}-pv
              mountPath: /pv
          {{ end }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 80
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 80
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 80
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: {{ .Values.deploymentStrategy }}
